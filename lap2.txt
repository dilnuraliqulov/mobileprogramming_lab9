1.MAIN FUNCTION

2.The main method is the entry point  of an executable  program.It is typically declared as "static" in java because we can use it without creating a instance of a class.
3.In c++:
Return type:int
Parameters:can take  command-line arguments-int main(int argc, char* argv[])
Access modifiers:doesnt use access modifier for main function
In java:
Return type:void
Parameters:must take a single parameter String[] arguments
Access modifiers:must be public and static
4.In c++ :The int returned from main is the exit status
In java:We use System.exit(int) to signal a non-zero exit status

2.VARIABLES

2.Primitive types:

Primitive types are stored directly in memory where the variable is declared.
They holds the actaule value not a reference

Reference types:

A variables of reference types stores a reference to the actaule object in memory.The actual object data is stored on the heap
3.Scope is the block of a program where a variable can be accessed.A variable declared inside a method or function has a local scope.It will be created when the method created and destroyed when the method ends.
A variable declared with static belongs to the class not objects.It exists for the entire program.
4.In statically-typed languages, the type of vairables is known and checked at compile time.It cannot change to hold another type of value.
In dynamically-typed languages:Variables types are determined at runtime not at compile time.

3.CONTROL FLOW

2.
While loop checks the condition first and then executes the necessary block
Do while executes the program without checking condition and then checks the condition
3.A switch statement is the conditional statement that we use instead of writing multiple if else statements.
case:If the expression matches that case, execution starts from there
default:if the expression doesnt match any case default block will be ecexuted
break:exits the switch block after a case executed
4.Logical AND:If the first operand is false, the whole expression will be false.
Logical OR:If the first operand is true, the whole expression will be true

4.FUNCTIONS/METHODS

2.Pass-by-value:a copy of the argument is passed to the function.
Pass-by-pointer:A memory address(pointer) to the variable is passed.
Pass-by-reference:An alias to the original variable is passed.

Java:Pass-by-value of object reference-java always passes arguments by value.For objects → the reference itself is copied

3.Method overloading allows writing multiples functions with the same name but different parameter lists in the same scope or class.
The parameter list must be different in both java and c++.

4.Recursion is when a function calls itself to solve a problem.The base case is the condition that stops recursion.Without a base case, the function would keep calling itself forever

5.COMMENTS

2.Comments make it easier for others to understand the purpose of the code.
3.Javadoc (for Java) and Doxygen (for C/C++) turn special comments in source code into structured, human-readable documentation(HTML,PDF).Instead of writing separate manuals, developers can generate documentation directly from the source code.
4.Code should be clear enough through meaningful names, good structure, and readability that someone can understand its purpose without needing many comments.In some cases,comments is still needed even the code is clean and self-documenting.Because code shows how something is done,but not always why its done that way

6.CLASSES

2.Class is a bluprint for a object.Object is the instace of the object.
3.Access modifiers controls visibility of class,method and fields.
Public:can be accessed from anywhere
Private:can be accessed only inside the same class
Protected:can be accessed:the same class,subclasses(even if in different packages),other classes in the same packages
4.A constructor is a special function in a class that is automatically called when an object of that class is created. Its main purpose is to initialize the object with initial values

7.ENUMS

2.Advantages of enums over strings/integers:Type safety,No risk of typos,More readable and self-documenting.
3.Prevents invalid values,makes code clearer,Easier to understand intent, reducing errors.
4.Java enums: full-fledged classes, can have fields, methods, constructors, strong type safety.
C++ old-style enums: just integer constants, no type safety

8.INHERITANCE

2.is-a (inheritance): A subclass is a specialized form of a superclass
has-a (composition): A class contains another as a member
3.Redefining a method in a subclass with the same signature as in the parent
C++: Use virtual in base, override in derived for clarity
Java: Use @Override to ensure method truly overrides
4.Diamond problem happens in multiple inheritance when two parent classes share a common base → ambiguity.
C++: Solved with virtual inheritance
Java: Avoids the problem by disallowing multiple class inheritance → uses interfaces instead.

9.MIXINS

2.Primary goal of mixins/interfaces with default methods:
Promote code reuse and shared behavior without forcing strict inheritance.
Allow classes to gain functionality without an "is-a" relationship.
3.Java’s default methods in interfaces:
Provide method implementations directly in interfaces.
Classes can inherit behavior from multiple interfaces → similar to mixins.
4.Trade-offs (inheritance vs composition vs mixins):
Inheritance: Simple reuse, but rigid hierarchy, risk of tight coupling.
Composition: Flexible, favors “has-a”, avoids hierarchy issues, more boilerplate.

10.POLYMORIPHISM

2.Compile-time vs runtime polymorphism:
Compile-time (static): Resolved at compile time, usually via method overloading.
Example: print(int x) vs print(String s).
Runtime (dynamic): Resolved at runtime, usually via method overriding.
3.Abstract class vs Interface:
Abstract class: Can have abstract + concrete methods, fields, constructors.
Interface (Java) / fully abstract class (C++): Only abstract methods (Java now allows default/static).
When to use:
Use abstract class when you need shared state/implementation.
Use interface when you need multiple unrelated classes to share behavior (no strict hierarchy).
4.Interfaces & abstract classes for polymorphism:
Java interfaces: Define a contract; classes implement them → polymorphic behavior.
C++ abstract classes (pure virtual functions): Define methods subclasses must override → enables runtime polymorphism.

11.ASYNC OPERATIONS
2.Primary problem solved by asynchronous programming:
Avoids blocking the main thread during slow I/O (file, DB).
Keeps applications responsive while waiting for operations to complete.
3.Parallel vs Concurrent execution:
Parallel: Tasks run literally at the same time on multiple processors/cores.
Concurrent: Tasks are logically progressing together, possibly interleaved on a single core.
4.Future / Promise:
An object representing a value that will be available later (result of async operation).
Java: Future, CompletableFuture → retrieve results, chain async tasks.
C++: std::future, with std::promise to set result → manage async computation results.

12.EXCEPTIONS

2.try, catch, finally + RAII:
try: Code that might throw an exception.
catch: Handles the exception.
finally: Runs regardless (cleanup).
C++: No finally; uses RAII → resources tied to object lifetime, automatically released in destructor.
3.Checked vs Unchecked exceptions (Java):
Checked: Must be declared/handled (IOException).
Unchecked: Don’t need to be declared (RuntimeException).
C++: No distinction → all exceptions are unchecked.
4.Exceptions vs error codes:
Advantages: Clearer code, separates error-handling from logic, propagates errors automatically, supports complex recovery.
Disadvantages: Performance cost, harder to follow control flow, risk of overuse, must ensure proper cleanup.










